
AVR_Ventivez_Mega8L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  00000612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac1  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a5  00000000  00000000  000011d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e6  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ef  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__vector_8>
  12:	63 c1       	rjmp	.+710    	; 0x2da <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	a2 c1       	rjmp	.+836    	; 0x35c <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 37       	cpi	r26, 0x76	; 118
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	37 d1       	rcall	.+622    	; 0x2b2 <main>
  44:	aa c2       	rjmp	.+1364   	; 0x59a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <i2c_write>:
volatile char KittenyKesz = 0;
unsigned char i2c_write( unsigned char data )
{
	uint8_t   twst;
	//  adat irasa a korabban megcimzett eszkozbe
	TWDR = data;
  48:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
  4a:	84 e8       	ldi	r24, 0x84	; 132
  4c:	86 bf       	out	0x36, r24	; 54
	// varakozas amig az atvitel be nem fejezodik
	while(!(TWCR & (1<<TWINT)));
  4e:	06 b6       	in	r0, 0x36	; 54
  50:	07 fe       	sbrs	r0, 7
  52:	fd cf       	rjmp	.-6      	; 0x4e <i2c_write+0x6>
	// TWI Statusz Register ertekenek ellenorzese, elooszto bitek kimaszkolasa.
	twst = TW_STATUS & 0xF8;
  54:	91 b1       	in	r25, 0x01	; 1
  56:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	98 32       	cpi	r25, 0x28	; 40
  5c:	09 f4       	brne	.+2      	; 0x60 <i2c_write+0x18>
  5e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
  60:	08 95       	ret

00000062 <EEPROM_write>:
void EEPROM_write( unsigned int uiAddress, char Data)
{
	/* 
	Wait for completion of previous write
	 */
	while(EECR & (1<<EEWE));
  62:	e1 99       	sbic	0x1c, 1	; 28
  64:	fe cf       	rjmp	.-4      	; 0x62 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
  66:	9f bb       	out	0x1f, r25	; 31
  68:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
  6a:	6d bb       	out	0x1d, r22	; 29
	/* 
	Write logical one to EEMWE */
	cli();
  6c:	f8 94       	cli
	EECR |= (1<<EEMWE);
  6e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
  70:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  72:	78 94       	sei
  74:	08 95       	ret

00000076 <EEPROM_read>:
}
char EEPROM_read(int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
  76:	e1 99       	sbic	0x1c, 1	; 28
  78:	fe cf       	rjmp	.-4      	; 0x76 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
  7a:	9f bb       	out	0x1f, r25	; 31
  7c:	8e bb       	out	0x1e, r24	; 30
	/*
	Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  7e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  80:	8d b3       	in	r24, 0x1d	; 29
}
  82:	08 95       	ret

00000084 <i2c_stop>:
void i2c_stop(void)
{
	// STOP jel kuldese
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  84:	84 e9       	ldi	r24, 0x94	; 148
  86:	86 bf       	out	0x36, r24	; 54
	//  varakozas amig a Stop utasitas vegre nem hajtodik es az I2C busz szabad nem lesz
	while(TWCR & (1<<TWSTO));
  88:	06 b6       	in	r0, 0x36	; 54
  8a:	04 fc       	sbrc	r0, 4
  8c:	fd cf       	rjmp	.-6      	; 0x88 <i2c_stop+0x4>
}
  8e:	08 95       	ret

00000090 <i2c_start_wait>:
{
	uint8_t   twst;
	while ( 1 )
	{
		// START jel kuldese
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  90:	24 ea       	ldi	r18, 0xA4	; 164
		// TWI Statusz Register ertekenek ellenorzese, elooszto bitek kimaszkolasa.
		twst = TW_STATUS & 0xF8;
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
		// eszkozazonosito cim kuldese
		TWDR = address;
		TWCR = (1<<TWINT) | (1<<TWEN);
  92:	34 e8       	ldi	r19, 0x84	; 132
		// TWI Statusz Register ertekenek ellenorzese, elooszto bitek kimaszkolasa.
		twst = TW_STATUS & 0xF8;
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
		{
			// az eszkoz foglalt, Stop jel kuldese, irasi muvelet befejezese
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  94:	44 e9       	ldi	r20, 0x94	; 148
{
	uint8_t   twst;
	while ( 1 )
	{
		// START jel kuldese
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  96:	26 bf       	out	0x36, r18	; 54
		// varakozas amig az atvitel be nem fejezodik
		while(!(TWCR & (1<<TWINT)));
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <i2c_start_wait+0x8>
		// TWI Statusz Register ertekenek ellenorzese, elooszto bitek kimaszkolasa.
		twst = TW_STATUS & 0xF8;
  9e:	91 b1       	in	r25, 0x01	; 1
  a0:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
  a2:	98 30       	cpi	r25, 0x08	; 8
  a4:	11 f0       	breq	.+4      	; 0xaa <i2c_start_wait+0x1a>
  a6:	90 31       	cpi	r25, 0x10	; 16
  a8:	b1 f7       	brne	.-20     	; 0x96 <i2c_start_wait+0x6>
		// eszkozazonosito cim kuldese
		TWDR = address;
  aa:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
  ac:	36 bf       	out	0x36, r19	; 54
		// varakozas amig az atvitel be nem fejezodik
		while(!(TWCR & (1<<TWINT)));
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <i2c_start_wait+0x1e>
		// TWI Statusz Register ertekenek ellenorzese, elooszto bitek kimaszkolasa.
		twst = TW_STATUS & 0xF8;
  b4:	91 b1       	in	r25, 0x01	; 1
  b6:	98 7f       	andi	r25, 0xF8	; 248
		if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
  b8:	90 32       	cpi	r25, 0x20	; 32
  ba:	11 f0       	breq	.+4      	; 0xc0 <i2c_start_wait+0x30>
  bc:	98 35       	cpi	r25, 0x58	; 88
  be:	29 f4       	brne	.+10     	; 0xca <i2c_start_wait+0x3a>
		{
			// az eszkoz foglalt, Stop jel kuldese, irasi muvelet befejezese
			TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  c0:	46 bf       	out	0x36, r20	; 54
			//  varakozas amig a Stop utasitas vegre nem hajtodik es az I2C busz szabad nem lesz
			while(TWCR & (1<<TWSTO));
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	04 fc       	sbrc	r0, 4
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <i2c_start_wait+0x32>
  c8:	e6 cf       	rjmp	.-52     	; 0x96 <i2c_start_wait+0x6>
  ca:	08 95       	ret

000000cc <KonfigUART>:
	}
}
void KonfigUART()  // UART beallitasa
{
	// 9600 bps soros kommunikacio sebesseg beallitasa
	UBRRL = UBRR_ERTEK;        // UBRR_ERTEK also 8 bitjenek betoltese az UBRRL regiszterbe
  cc:	8f e2       	ldi	r24, 0x2F	; 47
  ce:	89 b9       	out	0x09, r24	; 9
	UBRRH = (UBRR_ERTEK>>8);   // UBRR_ERTEK felso 8 bitjenek betoltese az UBRRH regiszterbe
  d0:	10 bc       	out	0x20, r1	; 32
	// Aszinkron mod, 8 Adat Bit, Nincs Paritas Bit, 1 Stop Bit
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	86 68       	ori	r24, 0x86	; 134
  d6:	80 bd       	out	0x20, r24	; 32
	//Ado es Vevo aramkorok bekapcsolasa + az RX interrupt engedelyezese
	UCSRB |= (1 << RXEN) | (1 << RXCIE) | (1 << TXEN);   //
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	88 69       	ori	r24, 0x98	; 152
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	08 95       	ret

000000e0 <__vector_8>:
	
	RESET();
}

ISR(TIMER1_OVF_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	TCNT1 = 155;
  ee:	8b e9       	ldi	r24, 0x9B	; 155
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9d bd       	out	0x2d, r25	; 45
  f4:	8c bd       	out	0x2c, r24	; 44
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <RESET_M48>:
	RESET_MCP2200();
	WDTCR |= (1<<WDE);
}
void RESET_M48()
{
	PORTC &= ~(1<<PINC3);
 104:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	97 e4       	ldi	r25, 0x47	; 71
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <RESET_M48+0x6>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <RESET_M48+0xc>
 110:	00 00       	nop
	_delay_ms(10);
	PORTC |= (1<<PINC3);
 112:	ab 9a       	sbi	0x15, 3	; 21
 114:	08 95       	ret

00000116 <RESET_MCP2200>:
}
void RESET_MCP2200()
{
	PORTD &= ~(1<<PIND2);
 116:	92 98       	cbi	0x12, 2	; 18
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	8f eb       	ldi	r24, 0xBF	; 191
 11c:	96 e0       	ldi	r25, 0x06	; 6
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <RESET_MCP2200+0x8>
 126:	00 c0       	rjmp	.+0      	; 0x128 <RESET_MCP2200+0x12>
 128:	00 00       	nop
	_delay_ms(300);
	PORTD |= (1<<PIND2);
 12a:	92 9a       	sbi	0x12, 2	; 18
 12c:	08 95       	ret

0000012e <RESET>:
{
	TCNT1 = 155;
}
void RESET()
{
	RESET_M48();
 12e:	ea df       	rcall	.-44     	; 0x104 <RESET_M48>
	RESET_MCP2200();
 130:	f2 df       	rcall	.-28     	; 0x116 <RESET_MCP2200>
	WDTCR |= (1<<WDE);
 132:	81 b5       	in	r24, 0x21	; 33
 134:	88 60       	ori	r24, 0x08	; 8
 136:	81 bd       	out	0x21, r24	; 33
 138:	08 95       	ret

0000013a <KittenyBeallito>:
	//ADCSRA |= (1<<ADEN) | (1<<ADFR) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1<<ADSC);
	//char csatorna = 0;
	//ADMUX = 0b00000000 | (1<<ADLAR) | csatorna;
}
void KittenyBeallito()
{
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	//{OCR1B = 0; TCCR1A &= ~(1<<COM1B1);} //////////28KHz
	//else
	//{OCR1B = kittenyek[7]; TCCR1A |= (1<<COM1B1);} //////////28KHz

	
	if(kittenyek[0] < 2)
 140:	80 91 66 00 	lds	r24, 0x0066
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	30 f4       	brcc	.+12     	; 0x154 <KittenyBeallito+0x1a>
	{OCR1A = 0; TCCR1A &= ~(1<<COM1A1);}
 148:	1b bc       	out	0x2b, r1	; 43
 14a:	1a bc       	out	0x2a, r1	; 42
 14c:	8f b5       	in	r24, 0x2f	; 47
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8f bd       	out	0x2f, r24	; 47
 152:	0a c0       	rjmp	.+20     	; 0x168 <KittenyBeallito+0x2e>
	else
	{OCR1A = kittenyek[0] + 155; TCCR1A |= (1<<COM1A1);}
 154:	80 91 66 00 	lds	r24, 0x0066
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	85 56       	subi	r24, 0x65	; 101
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	9b bd       	out	0x2b, r25	; 43
 160:	8a bd       	out	0x2a, r24	; 42
 162:	8f b5       	in	r24, 0x2f	; 47
 164:	80 68       	ori	r24, 0x80	; 128
 166:	8f bd       	out	0x2f, r24	; 47
	
	if(kittenyek[7] < 2)
 168:	80 91 6d 00 	lds	r24, 0x006D
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	30 f4       	brcc	.+12     	; 0x17c <KittenyBeallito+0x42>
	{OCR1B = 0; TCCR1A &= ~(1<<COM1B1);}
 170:	19 bc       	out	0x29, r1	; 41
 172:	18 bc       	out	0x28, r1	; 40
 174:	8f b5       	in	r24, 0x2f	; 47
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	8f bd       	out	0x2f, r24	; 47
 17a:	5c c0       	rjmp	.+184    	; 0x234 <KittenyBeallito+0xfa>
	else
	{OCR1B = kittenyek[7] + 155; TCCR1A |= (1<<COM1B1);}
 17c:	80 91 6d 00 	lds	r24, 0x006D
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	85 56       	subi	r24, 0x65	; 101
 184:	9f 4f       	sbci	r25, 0xFF	; 255
 186:	99 bd       	out	0x29, r25	; 41
 188:	88 bd       	out	0x28, r24	; 40
 18a:	8f b5       	in	r24, 0x2f	; 47
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	8f bd       	out	0x2f, r24	; 47
 190:	51 c0       	rjmp	.+162    	; 0x234 <KittenyBeallito+0xfa>
	
	char i;
	for (i=0; i < 5; ++i)
	{
		
		i2c_start_wait(Mega48_TWIcim + TWI_IR);
 192:	80 ea       	ldi	r24, 0xA0	; 160
 194:	7d df       	rcall	.-262    	; 0x90 <i2c_start_wait>
		
		if(kittenyek[1] < 2)
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <KittenyBeallito+0x6c>
		{
			if(i2c_write(0)== 1)
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	54 df       	rcall	.-344    	; 0x48 <i2c_write>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	29 f4       	brne	.+10     	; 0x1ae <KittenyBeallito+0x74>
 1a4:	42 c0       	rjmp	.+132    	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[1]) == 1)
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	4f df       	rcall	.-354    	; 0x48 <i2c_write>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	f1 f1       	breq	.+124    	; 0x22a <KittenyBeallito+0xf0>
		continue;
		if(kittenyek[2] < 2)
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	28 f4       	brcc	.+10     	; 0x1be <KittenyBeallito+0x84>
		{
			if(i2c_write(0)== 1)
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	48 df       	rcall	.-368    	; 0x48 <i2c_write>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <KittenyBeallito+0x8c>
 1bc:	36 c0       	rjmp	.+108    	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[2]) == 1)
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	43 df       	rcall	.-378    	; 0x48 <i2c_write>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 f1       	breq	.+100    	; 0x22a <KittenyBeallito+0xf0>
		continue;
		if(kittenyek[3] < 2)
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	28 f4       	brcc	.+10     	; 0x1d6 <KittenyBeallito+0x9c>
		{
			if(i2c_write(0)== 1)
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	3c df       	rcall	.-392    	; 0x48 <i2c_write>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <KittenyBeallito+0xa4>
 1d4:	2a c0       	rjmp	.+84     	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[3]) == 1)
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	37 df       	rcall	.-402    	; 0x48 <i2c_write>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	31 f1       	breq	.+76     	; 0x22a <KittenyBeallito+0xf0>
		continue;
		if(kittenyek[4] < 2)
 1de:	8c 81       	ldd	r24, Y+4	; 0x04
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	28 f4       	brcc	.+10     	; 0x1ee <KittenyBeallito+0xb4>
		{
			if(i2c_write(0)== 1)
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	30 df       	rcall	.-416    	; 0x48 <i2c_write>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <KittenyBeallito+0xbc>
 1ec:	1e c0       	rjmp	.+60     	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[4]) == 1)
 1ee:	8c 81       	ldd	r24, Y+4	; 0x04
 1f0:	2b df       	rcall	.-426    	; 0x48 <i2c_write>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	d1 f0       	breq	.+52     	; 0x22a <KittenyBeallito+0xf0>
		continue;
		if(kittenyek[5] < 2)
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	28 f4       	brcc	.+10     	; 0x206 <KittenyBeallito+0xcc>
		{
			if(i2c_write(0)== 1)
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	24 df       	rcall	.-440    	; 0x48 <i2c_write>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	29 f4       	brne	.+10     	; 0x20e <KittenyBeallito+0xd4>
 204:	12 c0       	rjmp	.+36     	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[5]) == 1)
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	1f df       	rcall	.-450    	; 0x48 <i2c_write>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	71 f0       	breq	.+28     	; 0x22a <KittenyBeallito+0xf0>
		continue;
		if(kittenyek[6] < 2)
 20e:	8e 81       	ldd	r24, Y+6	; 0x06
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	28 f4       	brcc	.+10     	; 0x21e <KittenyBeallito+0xe4>
		{
			if(i2c_write(0)== 1)
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	18 df       	rcall	.-464    	; 0x48 <i2c_write>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	29 f4       	brne	.+10     	; 0x226 <KittenyBeallito+0xec>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <KittenyBeallito+0xf0>
			continue;
		}
		else if(i2c_write(kittenyek[6]) == 1)
 21e:	8e 81       	ldd	r24, Y+6	; 0x06
 220:	13 df       	rcall	.-474    	; 0x48 <i2c_write>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	11 f0       	breq	.+4      	; 0x22a <KittenyBeallito+0xf0>
		continue;
		
		i2c_stop();
 226:	2e df       	rcall	.-420    	; 0x84 <i2c_stop>
		
		return 0;
 228:	09 c0       	rjmp	.+18     	; 0x23c <KittenyBeallito+0x102>
 22a:	11 50       	subi	r17, 0x01	; 1
	{OCR1B = 0; TCCR1A &= ~(1<<COM1B1);}
	else
	{OCR1B = kittenyek[7] + 155; TCCR1A |= (1<<COM1B1);}
	
	char i;
	for (i=0; i < 5; ++i)
 22c:	09 f0       	breq	.+2      	; 0x230 <KittenyBeallito+0xf6>
 22e:	b1 cf       	rjmp	.-158    	; 0x192 <KittenyBeallito+0x58>
		i2c_stop();
		
		return 0;
	}
	
	RESET();
 230:	7e df       	rcall	.-260    	; 0x12e <RESET>
 232:	04 c0       	rjmp	.+8      	; 0x23c <KittenyBeallito+0x102>
	//ADCSRA |= (1<<ADEN) | (1<<ADFR) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1<<ADSC);
	//char csatorna = 0;
	//ADMUX = 0b00000000 | (1<<ADLAR) | csatorna;
}
void KittenyBeallito()
{
 234:	15 e0       	ldi	r17, 0x05	; 5
	for (i=0; i < 5; ++i)
	{
		
		i2c_start_wait(Mega48_TWIcim + TWI_IR);
		
		if(kittenyek[1] < 2)
 236:	c6 e6       	ldi	r28, 0x66	; 102
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	ab cf       	rjmp	.-170    	; 0x192 <KittenyBeallito+0x58>
		
		return 0;
	}
	
	RESET();
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	08 95       	ret

00000244 <init>:
		
	}
}

void init()
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	
	WDKorok = 0;
 248:	10 92 63 00 	sts	0x0063, r1
	TCCR0 |= (1<<CS02) | (1<<CS00);
 24c:	83 b7       	in	r24, 0x33	; 51
 24e:	85 60       	ori	r24, 0x05	; 5
 250:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0) | (1<<TOIE1);
 252:	89 b7       	in	r24, 0x39	; 57
 254:	85 60       	ori	r24, 0x05	; 5
 256:	89 bf       	out	0x39, r24	; 57
	PORTC |= (1<<PINC3);
 258:	ab 9a       	sbi	0x15, 3	; 21
	DDRC |= (1<<PINC3);
 25a:	a3 9a       	sbi	0x14, 3	; 20
	PORTD |= (1<<PIND2);
 25c:	92 9a       	sbi	0x12, 2	; 18
	DDRD |= (1<<PIND2);
 25e:	8a 9a       	sbi	0x11, 2	; 17
	
	KonfigUART();
 260:	35 df       	rcall	.-406    	; 0xcc <KonfigUART>
	
	TWBR = TWIBaudRate;
 262:	88 e6       	ldi	r24, 0x68	; 104
 264:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWIE);
 266:	85 e8       	ldi	r24, 0x85	; 133
 268:	86 bf       	out	0x36, r24	; 54
	
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 26a:	8f b5       	in	r24, 0x2f	; 47
 26c:	81 6a       	ori	r24, 0xA1	; 161
 26e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
 270:	8e b5       	in	r24, 0x2e	; 46
 272:	89 60       	ori	r24, 0x09	; 9
 274:	8e bd       	out	0x2e, r24	; 46
	DDRB |= (1<<PINB1) | (1<<PINB2);     // PORTB PB1 lab kimenet
 276:	87 b3       	in	r24, 0x17	; 23
 278:	86 60       	ori	r24, 0x06	; 6
 27a:	87 bb       	out	0x17, r24	; 23
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
	
	char i;
	for (i=0; i < 8; ++i)
	{
		kittenyek[i] = EEPROM_read(i);
 280:	ce 01       	movw	r24, r28
 282:	f9 de       	rcall	.-526    	; 0x76 <EEPROM_read>
 284:	fe 01       	movw	r30, r28
 286:	ea 59       	subi	r30, 0x9A	; 154
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	80 83       	st	Z, r24
 28c:	21 96       	adiw	r28, 0x01	; 1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
	TCCR1B |= (1<<WGM12) | (1<<CS10);
	DDRB |= (1<<PINB1) | (1<<PINB2);     // PORTB PB1 lab kimenet
	
	char i;
	for (i=0; i < 8; ++i)
 28e:	c8 30       	cpi	r28, 0x08	; 8
 290:	d1 05       	cpc	r29, r1
 292:	b1 f7       	brne	.-20     	; 0x280 <init+0x3c>
	{
		kittenyek[i] = EEPROM_read(i);
	}
	KittenyBeallito();
 294:	52 df       	rcall	.-348    	; 0x13a <KittenyBeallito>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	8f e7       	ldi	r24, 0x7F	; 127
 29a:	90 e7       	ldi	r25, 0x70	; 112
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <init+0x58>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <init+0x62>
 2a6:	00 00       	nop
	
	_delay_ms(5000);
	RESET_MCP2200();
 2a8:	36 df       	rcall	.-404    	; 0x116 <RESET_MCP2200>
	sei();
 2aa:	78 94       	sei
	//ADCSRA |= (1<<ADEN) | (1<<ADFR) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1<<ADSC);
	//char csatorna = 0;
	//ADMUX = 0b00000000 | (1<<ADLAR) | csatorna;
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <main>:
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x6>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x10>
 2c2:	00 00       	nop
}

int main(void)
{
	_delay_ms(50);
	init();
 2c4:	bf df       	rcall	.-130    	; 0x244 <init>
	
    while(1)
    {
		WDKorok = 0;
 2c6:	10 92 63 00 	sts	0x0063, r1
		if(KittenyKesz == 1)
 2ca:	80 91 60 00 	lds	r24, 0x0060
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	d1 f7       	brne	.-12     	; 0x2c6 <main+0x14>
		{
			KittenyBeallito();
 2d2:	33 df       	rcall	.-410    	; 0x13a <KittenyBeallito>
			KittenyKesz = 0;
 2d4:	10 92 60 00 	sts	0x0060, r1
 2d8:	f6 cf       	rjmp	.-20     	; 0x2c6 <main+0x14>

000002da <__vector_9>:
	PORTD &= ~(1<<PIND2);
	_delay_ms(300);
	PORTD |= (1<<PIND2);
}
ISR(TIMER0_OVF_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	++WDKorok;
 2fc:	80 91 63 00 	lds	r24, 0x0063
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 63 00 	sts	0x0063, r24
	++NemKapJelet;
 306:	80 91 61 00 	lds	r24, 0x0061
 30a:	90 91 62 00 	lds	r25, 0x0062
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 62 00 	sts	0x0062, r25
 314:	80 93 61 00 	sts	0x0061, r24
	if(WDKorok > 120)
 318:	80 91 63 00 	lds	r24, 0x0063
 31c:	89 37       	cpi	r24, 0x79	; 121
 31e:	08 f0       	brcs	.+2      	; 0x322 <__vector_9+0x48>
	RESET();
 320:	06 df       	rcall	.-500    	; 0x12e <RESET>
	
	if(NemKapJelet > 800)
 322:	80 91 61 00 	lds	r24, 0x0061
 326:	90 91 62 00 	lds	r25, 0x0062
 32a:	81 32       	cpi	r24, 0x21	; 33
 32c:	93 40       	sbci	r25, 0x03	; 3
 32e:	0c f0       	brlt	.+2      	; 0x332 <__vector_9+0x58>
	RESET();
 330:	fe de       	rcall	.-516    	; 0x12e <RESET>
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <UARTAdatKuld>:
void UARTAdatKuld(char adat)  // Ez a fuggveny a kuldendo adatot beirja az UDR regiszter kimeno pufferjebe
{
	while(!(UCSRA & (1<<UDRE))) // Varakozas amig az Ado kesz nem lesz az adatkuldesre
 354:	5d 9b       	sbis	0x0b, 5	; 11
 356:	fe cf       	rjmp	.-4      	; 0x354 <UARTAdatKuld>
	{
		//   Varakozas
	}
	// Az Ado mar kesz az adatkuldesre, a kuldendo adatot a kimeno pufferjebe irjuk
	UDR=adat;
 358:	8c b9       	out	0x0c, r24	; 12
 35a:	08 95       	ret

0000035c <__vector_11>:
}
ISR(USART_RXC_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	if(UDR == 255)
 382:	8c b1       	in	r24, 0x0c	; 12
 384:	8f 3f       	cpi	r24, 0xFF	; 255
 386:	09 f0       	breq	.+2      	; 0x38a <__vector_11+0x2e>
 388:	71 c0       	rjmp	.+226    	; 0x46c <__stack+0xd>
	{
		NemKapJelet = 0;
 38a:	10 92 62 00 	sts	0x0062, r1
 38e:	10 92 61 00 	sts	0x0061, r1
		UARTStatus = 0;
 392:	10 92 64 00 	sts	0x0064, r1
		
		UARTAdatKuld(125);
 396:	8d e7       	ldi	r24, 0x7D	; 125
 398:	dd df       	rcall	.-70     	; 0x354 <UARTAdatKuld>
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	8f e3       	ldi	r24, 0x3F	; 63
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <__vector_11+0x44>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_11+0x4e>
 3aa:	00 00       	nop
		_delay_ms(100);
		UARTAdatKuld(150);
 3ac:	86 e9       	ldi	r24, 0x96	; 150
 3ae:	d2 df       	rcall	.-92     	; 0x354 <UARTAdatKuld>
 3b0:	2f ef       	ldi	r18, 0xFF	; 255
 3b2:	8f e3       	ldi	r24, 0x3F	; 63
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <__vector_11+0x5a>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <__vector_11+0x64>
 3c0:	00 00       	nop
		_delay_ms(100);
		UARTAdatKuld(10);
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	c7 df       	rcall	.-114    	; 0x354 <UARTAdatKuld>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	97 e4       	ldi	r25, 0x47	; 71
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <__vector_11+0x6e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <__vector_11+0x74>
 3d0:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(20);
 3d2:	84 e1       	ldi	r24, 0x14	; 20
 3d4:	bf df       	rcall	.-130    	; 0x354 <UARTAdatKuld>
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	97 e4       	ldi	r25, 0x47	; 71
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <__vector_11+0x7e>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <__vector_11+0x84>
 3e0:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(30);
 3e2:	8e e1       	ldi	r24, 0x1E	; 30
 3e4:	b7 df       	rcall	.-146    	; 0x354 <UARTAdatKuld>
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	97 e4       	ldi	r25, 0x47	; 71
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <__vector_11+0x8e>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <__vector_11+0x94>
 3f0:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(40);
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	af df       	rcall	.-162    	; 0x354 <UARTAdatKuld>
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	97 e4       	ldi	r25, 0x47	; 71
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <__vector_11+0x9e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__vector_11+0xa4>
 400:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(50);
 402:	82 e3       	ldi	r24, 0x32	; 50
 404:	a7 df       	rcall	.-178    	; 0x354 <UARTAdatKuld>
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	97 e4       	ldi	r25, 0x47	; 71
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__vector_11+0xae>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__vector_11+0xb4>
 410:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(60);
 412:	8c e3       	ldi	r24, 0x3C	; 60
 414:	9f df       	rcall	.-194    	; 0x354 <UARTAdatKuld>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	97 e4       	ldi	r25, 0x47	; 71
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__vector_11+0xbe>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__vector_11+0xc4>
 420:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(70);
 422:	86 e4       	ldi	r24, 0x46	; 70
 424:	97 df       	rcall	.-210    	; 0x354 <UARTAdatKuld>
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	97 e4       	ldi	r25, 0x47	; 71
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__vector_11+0xce>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__vector_11+0xd4>
 430:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(80);
 432:	80 e5       	ldi	r24, 0x50	; 80
 434:	8f df       	rcall	.-226    	; 0x354 <UARTAdatKuld>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	97 e4       	ldi	r25, 0x47	; 71
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__vector_11+0xde>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__vector_11+0xe4>
 440:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(35);
 442:	83 e2       	ldi	r24, 0x23	; 35
 444:	87 df       	rcall	.-242    	; 0x354 <UARTAdatKuld>
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	97 e4       	ldi	r25, 0x47	; 71
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__vector_11+0xee>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__vector_11+0xf4>
 450:	00 00       	nop
		_delay_ms(10);
		UARTAdatKuld(36);
 452:	84 e2       	ldi	r24, 0x24	; 36
 454:	7f df       	rcall	.-258    	; 0x354 <UARTAdatKuld>
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	97 e4       	ldi	r25, 0x47	; 71
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__vector_11+0xfe>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__stack+0x1>
 460:	00 00       	nop
		_delay_ms(10);
		NemKapJelet = 0;
 462:	10 92 62 00 	sts	0x0062, r1
 466:	10 92 61 00 	sts	0x0061, r1
 46a:	84 c0       	rjmp	.+264    	; 0x574 <__stack+0x115>
	}
	else if(UDR == 107)
 46c:	8c b1       	in	r24, 0x0c	; 12
 46e:	8b 36       	cpi	r24, 0x6B	; 107
 470:	61 f4       	brne	.+24     	; 0x48a <__stack+0x2b>
	{
		NemKapJelet = 0;
 472:	10 92 62 00 	sts	0x0062, r1
 476:	10 92 61 00 	sts	0x0061, r1
		
		UARTStatus = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 64 00 	sts	0x0064, r24
		hanyadikKit = 0;
 480:	10 92 65 00 	sts	0x0065, r1
		UARTAdatKuld(107);
 484:	8b e6       	ldi	r24, 0x6B	; 107
 486:	66 df       	rcall	.-308    	; 0x354 <UARTAdatKuld>
 488:	75 c0       	rjmp	.+234    	; 0x574 <__stack+0x115>
	}
	else if(UDR == 125)
 48a:	8c b1       	in	r24, 0x0c	; 12
 48c:	8d 37       	cpi	r24, 0x7D	; 125
 48e:	61 f4       	brne	.+24     	; 0x4a8 <__stack+0x49>
	{
		NemKapJelet = 0;
 490:	10 92 62 00 	sts	0x0062, r1
 494:	10 92 61 00 	sts	0x0061, r1
		
		UARTStatus = 2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	80 93 64 00 	sts	0x0064, r24
		hanyadikKit = 0;
 49e:	10 92 65 00 	sts	0x0065, r1
		UARTAdatKuld(125);
 4a2:	8d e7       	ldi	r24, 0x7D	; 125
 4a4:	57 df       	rcall	.-338    	; 0x354 <UARTAdatKuld>
 4a6:	66 c0       	rjmp	.+204    	; 0x574 <__stack+0x115>
	}
	else if(UDR < 101)
 4a8:	8c b1       	in	r24, 0x0c	; 12
 4aa:	85 36       	cpi	r24, 0x65	; 101
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__stack+0x51>
 4ae:	62 c0       	rjmp	.+196    	; 0x574 <__stack+0x115>
	{
		if(UARTStatus == 1)
 4b0:	80 91 64 00 	lds	r24, 0x0064
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	21 f5       	brne	.+72     	; 0x500 <__stack+0xa1>
		{
			NemKapJelet = 0;
 4b8:	10 92 62 00 	sts	0x0062, r1
 4bc:	10 92 61 00 	sts	0x0061, r1
			
			//kittenyek[hanyadikKit] = (char)((double)UDR*(double)2.55); //////////28KHz
			kittenyek[hanyadikKit] = UDR;
 4c0:	e0 91 65 00 	lds	r30, 0x0065
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	8c b1       	in	r24, 0x0c	; 12
 4c8:	ea 59       	subi	r30, 0x9A	; 154
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	80 83       	st	Z, r24
			++ hanyadikKit;
 4ce:	80 91 65 00 	lds	r24, 0x0065
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 65 00 	sts	0x0065, r24
			if(hanyadikKit == 8)
 4d8:	80 91 65 00 	lds	r24, 0x0065
 4dc:	88 30       	cpi	r24, 0x08	; 8
 4de:	49 f4       	brne	.+18     	; 0x4f2 <__stack+0x93>
			{
				UARTAdatKuld(120);
 4e0:	88 e7       	ldi	r24, 0x78	; 120
 4e2:	38 df       	rcall	.-400    	; 0x354 <UARTAdatKuld>
				hanyadikKit = UARTStatus = 0;
 4e4:	10 92 64 00 	sts	0x0064, r1
 4e8:	10 92 65 00 	sts	0x0065, r1
				KittenyKesz = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 60 00 	sts	0x0060, r24
			}
			
			NemKapJelet = 0;
 4f2:	10 92 62 00 	sts	0x0062, r1
 4f6:	10 92 61 00 	sts	0x0061, r1
			UARTAdatKuld(UDR);
 4fa:	8c b1       	in	r24, 0x0c	; 12
 4fc:	2b df       	rcall	.-426    	; 0x354 <UARTAdatKuld>
 4fe:	3a c0       	rjmp	.+116    	; 0x574 <__stack+0x115>
		}
		else if(UARTStatus == 2)
 500:	80 91 64 00 	lds	r24, 0x0064
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	b1 f5       	brne	.+108    	; 0x574 <__stack+0x115>
		{
			NemKapJelet = 0;
 508:	10 92 62 00 	sts	0x0062, r1
 50c:	10 92 61 00 	sts	0x0061, r1
			
			//AlapKittenyek[hanyadikKit] = (char)((double)UDR*(double)2.55); //////////28KHz
			AlapKittenyek[hanyadikKit] = UDR;
 510:	e0 91 65 00 	lds	r30, 0x0065
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	8c b1       	in	r24, 0x0c	; 12
 518:	e2 59       	subi	r30, 0x92	; 146
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	80 83       	st	Z, r24
			++ hanyadikKit;
 51e:	80 91 65 00 	lds	r24, 0x0065
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	80 93 65 00 	sts	0x0065, r24
			if(hanyadikKit == 8)
 528:	80 91 65 00 	lds	r24, 0x0065
 52c:	88 30       	cpi	r24, 0x08	; 8
 52e:	e1 f4       	brne	.+56     	; 0x568 <__stack+0x109>
			{
				UARTAdatKuld(120);
 530:	88 e7       	ldi	r24, 0x78	; 120
 532:	10 df       	rcall	.-480    	; 0x354 <UARTAdatKuld>
				hanyadikKit = UARTStatus = 0;
 534:	10 92 64 00 	sts	0x0064, r1
 538:	10 92 65 00 	sts	0x0065, r1
 53c:	c0 e0       	ldi	r28, 0x00	; 0
 53e:	d0 e0       	ldi	r29, 0x00	; 0
				
				char i;
				for (i=0; i < 8; ++i)
				{
					if(AlapKittenyek[i] <2)
 540:	fe 01       	movw	r30, r28
 542:	e2 59       	subi	r30, 0x92	; 146
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	80 81       	ld	r24, Z
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	20 f4       	brcc	.+8      	; 0x554 <__stack+0xf5>
					EEPROM_write(i,0);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	ce 01       	movw	r24, r28
 550:	88 dd       	rcall	.-1264   	; 0x62 <EEPROM_write>
 552:	06 c0       	rjmp	.+12     	; 0x560 <__stack+0x101>
					else
					EEPROM_write(i,AlapKittenyek[i]);
 554:	fe 01       	movw	r30, r28
 556:	e2 59       	subi	r30, 0x92	; 146
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	60 81       	ld	r22, Z
 55c:	ce 01       	movw	r24, r28
 55e:	81 dd       	rcall	.-1278   	; 0x62 <EEPROM_write>
 560:	21 96       	adiw	r28, 0x01	; 1
			{
				UARTAdatKuld(120);
				hanyadikKit = UARTStatus = 0;
				
				char i;
				for (i=0; i < 8; ++i)
 562:	c8 30       	cpi	r28, 0x08	; 8
 564:	d1 05       	cpc	r29, r1
 566:	61 f7       	brne	.-40     	; 0x540 <__stack+0xe1>
					else
					EEPROM_write(i,AlapKittenyek[i]);
				}
			}
			
			NemKapJelet = 0;
 568:	10 92 62 00 	sts	0x0062, r1
 56c:	10 92 61 00 	sts	0x0061, r1
			UARTAdatKuld(UDR);
 570:	8c b1       	in	r24, 0x0c	; 12
 572:	f0 de       	rcall	.-544    	; 0x354 <UARTAdatKuld>
		}
	}
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>

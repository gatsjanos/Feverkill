
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000013e  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000be  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016f  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a5  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	fd c0       	rjmp	.+506    	; 0x20e <__vector_9>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	e5 c0       	rjmp	.+458    	; 0x1e6 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	d4 c0       	rjmp	.+424    	; 0x1ca <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	12 c0       	rjmp	.+36     	; 0x56 <__vector_24>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	2b d1       	rcall	.+598    	; 0x2a8 <main>
  52:	38 c1       	rjmp	.+624    	; 0x2c4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_24>:

#define F_CPU 7372800

volatile char hanyadik = 0;
ISR(TWI_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
  64:	ef 93       	push	r30
  66:	ff 93       	push	r31
	if(TWSR == 0x60) // IF slave address + w received
  68:	80 91 b9 00 	lds	r24, 0x00B9
  6c:	80 36       	cpi	r24, 0x60	; 96
  6e:	11 f4       	brne	.+4      	; 0x74 <__vector_24+0x1e>
	{  
		hanyadik = 0;              
  70:	10 92 00 01 	sts	0x0100, r1
	}
	
	if(TWSR == 0x80) // IF data received
  74:	80 91 b9 00 	lds	r24, 0x00B9
  78:	80 38       	cpi	r24, 0x80	; 128
  7a:	09 f0       	breq	.+2      	; 0x7e <__vector_24+0x28>
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__vector_24+0x158>
	{            
		++hanyadik;
  7e:	80 91 00 01 	lds	r24, 0x0100
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	80 93 00 01 	sts	0x0100, r24
		if(hanyadik == 1)//2
  88:	80 91 00 01 	lds	r24, 0x0100
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	81 f4       	brne	.+32     	; 0xb0 <__vector_24+0x5a>
			{OCR0A = TWDR + 155; if(TWDR == 0){TCCR0A &= ~(1<<COM0A1);} else {TCCR0A |= (1<<COM0A1);} }
  90:	eb eb       	ldi	r30, 0xBB	; 187
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 56       	subi	r24, 0x65	; 101
  98:	87 bd       	out	0x27, r24	; 39
  9a:	80 81       	ld	r24, Z
  9c:	81 11       	cpse	r24, r1
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__vector_24+0x52>
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	84 bd       	out	0x24, r24	; 36
  a6:	83 c0       	rjmp	.+262    	; 0x1ae <__vector_24+0x158>
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	84 bd       	out	0x24, r24	; 36
  ae:	7f c0       	rjmp	.+254    	; 0x1ae <__vector_24+0x158>
		else if(hanyadik == 2)//3
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	c9 f4       	brne	.+50     	; 0xea <__vector_24+0x94>
			{OCR1A = TWDR + 155; if(TWDR == 0){TCCR1A &= ~(1<<COM1A1);} else {TCCR1A |= (1<<COM1A1);} }
  b8:	eb eb       	ldi	r30, 0xBB	; 187
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	85 56       	subi	r24, 0x65	; 101
  c2:	9f 4f       	sbci	r25, 0xFF	; 255
  c4:	90 93 89 00 	sts	0x0089, r25
  c8:	80 93 88 00 	sts	0x0088, r24
  cc:	80 81       	ld	r24, Z
  ce:	81 11       	cpse	r24, r1
  d0:	06 c0       	rjmp	.+12     	; 0xde <__vector_24+0x88>
  d2:	e0 e8       	ldi	r30, 0x80	; 128
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	80 83       	st	Z, r24
  dc:	68 c0       	rjmp	.+208    	; 0x1ae <__vector_24+0x158>
  de:	e0 e8       	ldi	r30, 0x80	; 128
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
  e8:	62 c0       	rjmp	.+196    	; 0x1ae <__vector_24+0x158>
		else if(hanyadik == 3)//4
  ea:	80 91 00 01 	lds	r24, 0x0100
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	a9 f4       	brne	.+42     	; 0x11c <__vector_24+0xc6>
			{OCR2A = TWDR + 155; if(TWDR == 0){TCCR2A &= ~(1<<COM2A1);} else {TCCR2A |= (1<<COM2A1);} }
  f2:	eb eb       	ldi	r30, 0xBB	; 187
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	85 56       	subi	r24, 0x65	; 101
  fa:	80 93 b3 00 	sts	0x00B3, r24
  fe:	80 81       	ld	r24, Z
 100:	81 11       	cpse	r24, r1
 102:	06 c0       	rjmp	.+12     	; 0x110 <__vector_24+0xba>
 104:	e0 eb       	ldi	r30, 0xB0	; 176
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	80 83       	st	Z, r24
 10e:	4f c0       	rjmp	.+158    	; 0x1ae <__vector_24+0x158>
 110:	e0 eb       	ldi	r30, 0xB0	; 176
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 68       	ori	r24, 0x80	; 128
 118:	80 83       	st	Z, r24
 11a:	49 c0       	rjmp	.+146    	; 0x1ae <__vector_24+0x158>
		else if(hanyadik == 4)//5
 11c:	80 91 00 01 	lds	r24, 0x0100
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	a9 f4       	brne	.+42     	; 0x14e <__vector_24+0xf8>
			{OCR2B = TWDR + 155; if(TWDR == 0){TCCR2A &= ~(1<<COM2B1);} else {TCCR2A |= (1<<COM2B1);} }
 124:	eb eb       	ldi	r30, 0xBB	; 187
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	85 56       	subi	r24, 0x65	; 101
 12c:	80 93 b4 00 	sts	0x00B4, r24
 130:	80 81       	ld	r24, Z
 132:	81 11       	cpse	r24, r1
 134:	06 c0       	rjmp	.+12     	; 0x142 <__vector_24+0xec>
 136:	e0 eb       	ldi	r30, 0xB0	; 176
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	80 83       	st	Z, r24
 140:	36 c0       	rjmp	.+108    	; 0x1ae <__vector_24+0x158>
 142:	e0 eb       	ldi	r30, 0xB0	; 176
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	80 83       	st	Z, r24
 14c:	30 c0       	rjmp	.+96     	; 0x1ae <__vector_24+0x158>
		else if(hanyadik == 5)//6
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	c9 f4       	brne	.+50     	; 0x188 <__vector_24+0x132>
			{OCR1B = TWDR + 155; if(TWDR == 0){TCCR1A &= ~(1<<COM1B1);} else {TCCR1A |= (1<<COM1B1);} }
 156:	eb eb       	ldi	r30, 0xBB	; 187
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	85 56       	subi	r24, 0x65	; 101
 160:	9f 4f       	sbci	r25, 0xFF	; 255
 162:	90 93 8b 00 	sts	0x008B, r25
 166:	80 93 8a 00 	sts	0x008A, r24
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	06 c0       	rjmp	.+12     	; 0x17c <__vector_24+0x126>
 170:	e0 e8       	ldi	r30, 0x80	; 128
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	80 83       	st	Z, r24
 17a:	19 c0       	rjmp	.+50     	; 0x1ae <__vector_24+0x158>
 17c:	e0 e8       	ldi	r30, 0x80	; 128
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 62       	ori	r24, 0x20	; 32
 184:	80 83       	st	Z, r24
 186:	13 c0       	rjmp	.+38     	; 0x1ae <__vector_24+0x158>
		else if(hanyadik == 6)//7
 188:	80 91 00 01 	lds	r24, 0x0100
 18c:	86 30       	cpi	r24, 0x06	; 6
 18e:	79 f4       	brne	.+30     	; 0x1ae <__vector_24+0x158>
			{OCR0B = TWDR + 155; if(TWDR == 0){TCCR0A &= ~(1<<COM0B1);} else {TCCR0A |= (1<<COM0B1);} }
 190:	eb eb       	ldi	r30, 0xBB	; 187
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	85 56       	subi	r24, 0x65	; 101
 198:	88 bd       	out	0x28, r24	; 40
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <__vector_24+0x152>
 1a0:	84 b5       	in	r24, 0x24	; 36
 1a2:	8f 7d       	andi	r24, 0xDF	; 223
 1a4:	84 bd       	out	0x24, r24	; 36
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <__vector_24+0x158>
 1a8:	84 b5       	in	r24, 0x24	; 36
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	84 bd       	out	0x24, r24	; 36
	}
	TWCR |= 0x80;// Clear interrupt flag bit
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	80 83       	st	Z, r24
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
	TCNT0 = 155;
 1d6:	8b e9       	ldi	r24, 0x9B	; 155
 1d8:	86 bd       	out	0x26, r24	; 38
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	TCNT1 = 155;
 1f4:	8b e9       	ldi	r24, 0x9B	; 155
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 85 00 	sts	0x0085, r25
 1fc:	80 93 84 00 	sts	0x0084, r24
}
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_9>:
ISR(TIMER2_OVF_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
	TCNT2 = 155;
 21a:	8b e9       	ldi	r24, 0x9B	; 155
 21c:	80 93 b2 00 	sts	0x00B2, r24
}
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <OC_init>:
    }
}

void OC_init()
{
	DDRB |= (1<<PINB1) | (1<<PINB2) | (1<<PINB3);
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	8e 60       	ori	r24, 0x0E	; 14
 230:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PIND3) | (1<<PIND5) |(1<<PIND6);
 232:	8a b1       	in	r24, 0x0a	; 10
 234:	88 66       	ori	r24, 0x68	; 104
 236:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);
 238:	84 b5       	in	r24, 0x24	; 36
 23a:	83 6a       	ori	r24, 0xA3	; 163
 23c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);
 23e:	85 b5       	in	r24, 0x25	; 37
 240:	81 60       	ori	r24, 0x01	; 1
 242:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 244:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 246:	18 bc       	out	0x28, r1	; 40
	
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 248:	e0 e8       	ldi	r30, 0x80	; 128
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 6a       	ori	r24, 0xA1	; 161
 250:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS10);
 252:	e1 e8       	ldi	r30, 0x81	; 129
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	89 60       	ori	r24, 0x09	; 9
 25a:	80 83       	st	Z, r24
	OCR1B = 0;
 25c:	10 92 8b 00 	sts	0x008B, r1
 260:	10 92 8a 00 	sts	0x008A, r1
	OCR1A = 0;
 264:	10 92 89 00 	sts	0x0089, r1
 268:	10 92 88 00 	sts	0x0088, r1
	
	TCCR2A |= (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);
 26c:	e0 eb       	ldi	r30, 0xB0	; 176
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	83 6a       	ori	r24, 0xA3	; 163
 274:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);
 276:	e1 eb       	ldi	r30, 0xB1	; 177
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 83       	st	Z, r24
	OCR2A = 0;
 280:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
 284:	10 92 b4 00 	sts	0x00B4, r1

	TIMSK0 |= (1<<TOIE0);
 288:	ee e6       	ldi	r30, 0x6E	; 110
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1);
 292:	ef e6       	ldi	r30, 0x6F	; 111
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
 29c:	e0 e7       	ldi	r30, 0x70	; 112
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret

000002a8 <main>:
{
	TCNT2 = 155;
}
int main(void)
{
	hanyadik = 0;
 2a8:	10 92 00 01 	sts	0x0100, r1
	sei();
 2ac:	78 94       	sei
	OC_init();
 2ae:	be df       	rcall	.-132    	; 0x22c <OC_init>
	
	TWBR = TWIBaudRate;
 2b0:	88 e6       	ldi	r24, 0x68	; 104
 2b2:	80 93 b8 00 	sts	0x00B8, r24
	
	TWAR = 0xA0;                // Slave address = 0xA0
 2b6:	80 ea       	ldi	r24, 0xA0	; 160
 2b8:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = 0x45;                // Enable TWI, interrupt enable
 2bc:	85 e4       	ldi	r24, 0x45	; 69
 2be:	80 93 bc 00 	sts	0x00BC, r24
		//////////////////////////////////////////////////////////////////////////////////
		//ADCSRA |= (1<<ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1<<ADSC);
		//OCR0A = OCR0B = OCR1A = OCR1B = OCR2A = OCR2B = TWDR;
		//////////////////////////////////////////////////////////////////////////////////
		
    }
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x1a>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
